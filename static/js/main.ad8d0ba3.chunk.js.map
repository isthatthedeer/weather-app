{"version":3,"sources":["components/welcome.jsx","components/chart.js","components/weather.jsx","components/search.jsx","components/main.jsx","App.js","serviceWorker.js","index.js"],"names":["Welcome","react_default","a","createElement","className","react_router_dom","to","index_es","icon","faSearch","Chart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","labels","data","map","el","tempMin","slice","datasets","borderColor","temp","chartOptions","legend","display","elements","point","radius","scales","yAxes","ticks","max","Math","apply","tempMax","min","stepSize","gridLines","xAxes","es","options","Component","Weather","weatherToday","forecast","city","country","isNaN","day","Infinity","onClick","click","i","key","chart","React","Search","onSubmit","getData","type","name","placeholder","error","faArrowRight","moment","require","API_KEY","Main","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","wrap","_context","prev","next","preventDefault","target","value","fetch","concat","then","result","ok","json","Error","reduce","reduceData","setState","flag","catch","stop","_x","arguments","weekForecast","matchIcon","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faCloud","faSun","findMode","input","counted","accu","obj","keys","b","reduced","values","list","total","objectSpread","defineProperty","date","dt_txt","format","weather","main","temp_min","temp_max","_loop","today","add","dayForecast","filter","push","Number","length","toFixed","handleSearchClick","search","App","console","log","vh","window","innerHeight","document","documentElement","style","setProperty","updateDimensions","addEventListener","removeEventListener","react_router","path","component","exact","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ad8d0ba3.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n\nconst Welcome = () => (\n    <div className=\"container\">\n        <div className=\"welcome\">\n            <h1>Welcome to WeatherApp</h1>\n            <p>To check the weather click the search button below</p>\n            <NavLink to=\"/main\"><FontAwesomeIcon icon={faSearch} /></NavLink>\n        </div>\n    </div>\n);\n\n\nexport default Welcome;","import React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\n\n\nclass Chart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chartData: {\n                labels: this.props.data.map(el => {return el.tempMin}).slice(2),\n                datasets: [{\n                borderColor: 'rgb(255, 255, 255)',\n                data: this.props.data.map(el => {return el.temp}).slice(2),\n                }]\n            },\n            chartOptions: {\n                legend: {\n                    display: false\n                },\n                elements: { \n                    point: { \n                        radius: 0 \n                    } \n                },\n                scales: {\n                    yAxes: [{\n                        display: false,\n                        ticks: {\n                            display: false,\n                            max: Math.max.apply(null, this.props.data.map(el => {return el.tempMax}).slice(2)) + 2,\n                            min: Math.min.apply(null, this.props.data.map(el => {return el.tempMin}).slice(2)) - 2,\n                            stepSize: 1\n                        },\n                        gridLines: {\n                            display:false\n                        }  \n                    }],\n                    xAxes: [{\n                        gridLines: {\n                            display:false\n                        },\n                        display: false,\n                        ticks: {\n                            display: false,\n                        },\n                    }]\n                }\n            }\n        } \n    }\n    render() {\n        return <div className=\"chart\">\n            <Line \n                data = {this.state.chartData}\n                options= {this.state.chartOptions}\n            />\n        </div>\n    }\n}\n\nexport default Chart;","import React from \"react\";\nimport Chart from './chart';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n\nclass Weather extends React.Component {\n    \n    render() {\n        const weatherToday = this.props.data[1];\n        const forecast = this.props.data.slice(2);\n        return (\n            <div className=\"info\">\n                <div className=\"row--top\">\n                    <div className=\"weatherToday\">\n                        <p>{this.props.data[0].city}, {this.props.data[0].country}</p>\n                        {isNaN(weatherToday.temp) === false && <h1>{weatherToday.temp}&deg;</h1>}\n                        {weatherToday.day !== '' && <p>{weatherToday.day}</p>}\n                        <p>\n                            {weatherToday.tempMin !== Infinity && <span>{weatherToday.tempMin}&deg;</span>}\n                            {weatherToday.tempMax !== -Infinity && <span>{weatherToday.tempMax}&deg;</span>}\n                        </p>\n                    </div>\n                </div>\n                <div className=\"row--bottom\">\n                    <div className=\"button\" onClick={this.props.click}><FontAwesomeIcon icon={faSearch} /></div>\n                    <div className=\"forecast forecast__top\">\n                        {forecast.map((el,i) => {\n                        return <div key={i}>\n                            { el.day !== '' && <p>{ el.day.slice(0,3) }</p>}\n                            { el.icon !== '' && <p><FontAwesomeIcon icon={el.icon} /></p>}\n                            { el.tempMax !== -Infinity && <p>{ el.tempMax }&deg;</p>}\n                        </div>\n                    })}\n                    </div>\n                    <div className=\"chart\">\n                        <Chart data={this.props.data}/>\n                    </div>\n                    <div className=\"forecast forecast__bottom\">\n                        {forecast.map((el,i) => {\n                        return <div key={i}>\n                            { el.tempMin !== Infinity && <p>{ el.tempMin }&deg;</p>}\n                        </div>\n                    })}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Weather;","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\n\nconst Search = (props) => (\n    <div className=\"search\">\n        <p>Please enter city and country:</p>\n        <form onSubmit={props.getData}>\n            <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n            <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\n            {props.error && <p>{props.error}</p>}\n            <button><FontAwesomeIcon icon={faArrowRight} /></button>\n        </form>\n    </div>\n);\n\nexport default Search;\n\n","import React from 'react';\nimport { faBolt, faCloudRain, faCloudShowersHeavy, faSnowflake, faCloud, faSun } from '@fortawesome/free-solid-svg-icons'\nimport Weather from './weather';\nimport Search from './search';\n\nconst moment = require('./../../node_modules/moment/moment.js');\nconst API_KEY = '3d76823d3b8852cd38d0ca9b1fccd7ff';\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            forecast: [],\n            flag: false\n        }\n    }\n    getData = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n\n        /* input validation; fetching data and catching potential errors */\n        if (city && country) {\n            fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&APPID=${API_KEY}&units=metric`)\n            .then(result => {\n                if (result.ok) {return result.json();}\n                else {throw new Error(\"Connection error!\");}})\n            .then(reduce => {return this.reduceData(reduce)})\n            .then(data => {return this.setState({forecast: data, flag: true, error: \"\"});})\n            .catch(() => this.setState({forecast: [], error: 'City is not found.'}));\n        } else {\n            this.setState({\n                error: 'Both fields must be filled out.'\n            })\n        }\n    }\n\n    reduceData = (data) => {\n        /* preparing basic information */\n        const weekForecast = [{city: data.city.name, country: data.city.country}];\n\n        /* function that matches weather description with appropriate icon */\n        const matchIcon = (icon) => {\n            switch (icon) {\n                case 'Thunderstorm': return faBolt;\n                case 'Drizzle': return faCloudRain;\n                case 'Rain': return faCloudShowersHeavy;\n                case 'Snow': return faSnowflake;\n                case 'Clouds': return faCloud;\n                case 'Clear': return faSun;\n                default: return '';\n            }\n        }\n        /* function that returns the most frequent element in array */\n        const findMode = (input) => {\n            let counted = input.reduce((accu, obj) => { \n                if (obj in accu) {\n                    accu[obj]++;\n                } else {\n                    accu[obj] = 1;\n                }\n                return accu;\n            }, {});\n            let mode = Object.keys(counted).reduce((a, b) => counted[a] > counted[b] ? a : b);\n            return mode;\n        }\n\n        /* reducing data - leaving only information that will be used */\n        let reduced = Object.values(data.list.reduce((total, el, i) => ({\n            ...total, [i]: {\n                        date: el.dt_txt.slice(0,10), \n                        day: moment(el.dt_txt).format('dddd'),\n                        icon: el.weather[0].main,\n                        temp: el.main.temp,\n                        tempMin: el.main.temp_min,\n                        tempMax: el.main.temp_max}\n            }), []))\n\n        /* preparing forecast for next five days */\n        for (let i = 0; i < 6; i++) {\n            let today = moment().add(i, 'days').format('dddd');\n            /* grouping information based on specific day; finding min, max and average temperatures; preparing icon */\n            let dayForecast = reduced.filter(el => el.day === today)\n            weekForecast.push({\n                day: findMode(dayForecast.map(el => el.day)),\n                icon: matchIcon(findMode(dayForecast.map(el => el.icon))),\n                temp: Number((dayForecast.reduce((accu, obj) => accu + obj.temp, 0) / dayForecast.length).toFixed()),\n                tempMin: Number(Math.min.apply(null, dayForecast.map(el => el.tempMin)).toFixed()),\n                tempMax: Number(Math.max.apply(null, dayForecast.map(el => el.tempMax)).toFixed())\n            })\n        }\n        return weekForecast;\n    }\n\n    /* resetting results and displaying search screen */\n    handleSearchClick = () => {\n        this.setState({forecast: [], flag: false})\n    }\n\n    /* conditional rendering - search or result screen whether the data is present */\n    render() {\n        const { flag } = this.state;\n        return (\n            <div className=\"container\">\n                {flag \n                    ? <Weather data={this.state.forecast} click={this.handleSearchClick}/>\n                    : <Search getData={this.getData} error={this.state.error}/>}\n            </div>\n        );\n    }\n}\n\n\nexport default Main;","import React from \"react\";\nimport { Route, Switch, HashRouter } from \"react-router-dom\";\nimport \"./App.scss\";\n\nimport Welcome from \"./components/welcome.jsx\"\nimport Main from \"./components/main.jsx\"\n\nclass App extends React.Component {\n\n  updateDimensions() {\n    console.log('działam')\n    let vh = window.innerHeight * 0.01;\n    document.documentElement.style.setProperty('--vh', `${vh}px`);\n  }\n\n  componentDidMount() {\n      this.updateDimensions();\n      window.addEventListener(\"resize\", this.updateDimensions());\n  }\n\n  componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.updateDimensions());\n  }\n\n  render() {\n    return (\n        <HashRouter>\n          <Switch>\n            <Route path=\"/\" component={Welcome} exact/>\n            <Route path=\"/main\" component={Main}/>\n          </Switch>\n        </HashRouter>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}