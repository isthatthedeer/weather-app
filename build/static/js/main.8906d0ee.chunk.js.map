{"version":3,"sources":["components/welcome.jsx","components/chart.js","components/main.jsx","App.js","serviceWorker.js","index.js"],"names":["Welcome","react_default","a","createElement","className","react_router_dom","to","index_es","icon","faSearch","Chart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","labels","data","map","el","tempMin","slice","datasets","borderColor","temp","chartOptions","legend","display","elements","point","radius","scales","yAxes","ticks","max","Math","apply","tempMax","min","stepSize","gridLines","xAxes","console","log","es","options","Component","API_KEY","Main","getData","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","city","country","wrap","_context","prev","next","preventDefault","target","value","fetch","concat","then","result","ok","json","Error","reduce","reduceData","setState","forecast","flag","error","catch","stop","_x","arguments","today","Date","weekForecast","name","matchIcon","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faCloud","faSun","reduced","values","list","total","i","objectSpread","defineProperty","date","dt_txt","day","toLocaleDateString","weekday","weather","main","temp_min","temp_max","setDate","getDate","dayForecast","filter","push","findMode","Number","accumulator","obj","length","toFixed","input","counted","acc","curr","keys","b","handleSearchClick","renderSearch","onSubmit","type","placeholder","faArrowRight","renderWeather","weatherToday","isNaN","Infinity","onClick","key","chart","React","App","react_router","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8906d0ee.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n\nconst Welcome = () => (\n    <div className=\"container\">\n        <div className=\"welcome\">\n            <h1>Welcome to WeatherApp</h1>\n            <p>To check the weather click the search button below</p>\n            <NavLink to=\"/main\"><FontAwesomeIcon icon={faSearch} /></NavLink>\n        </div>\n    </div>\n);\n\n\nexport default Welcome;","import React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\n\n\nclass Chart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chartData: {\n                labels: this.props.data.map(el => {return el.tempMin}).slice(2),\n                datasets: [{\n                borderColor: 'rgb(255, 255, 255)',\n                data: this.props.data.map(el => {return el.temp}).slice(2),\n                }]\n            },\n            chartOptions: {\n                legend: {\n                    display: false\n                },\n                elements: { \n                    point: { \n                        radius: 0 \n                    } \n                },\n                scales: {\n                    yAxes: [{\n                        display: false,\n                        ticks: {\n                            display: false,\n                            max: Math.max.apply(null, this.props.data.map(el => {return el.tempMax}).slice(2)) + 2,\n                            min: Math.min.apply(null, this.props.data.map(el => {return el.tempMin}).slice(2)) - 2,\n                            stepSize: 1\n                        },\n                        gridLines: {\n                            display:false\n                        }  \n                    }],\n                    xAxes: [{\n                        gridLines: {\n                            display:false\n                        },\n                        display: false,\n                        ticks: {\n                            display: false,\n                        },\n                    }]\n                }\n            }\n        } \n    }\n    render() {\n        console.log(this.state.chartData)\n        return <div className=\"chart\">\n            <Line \n                data = {this.state.chartData}\n                options= {this.state.chartOptions}\n            />\n        </div>\n    }\n}\n\nexport default Chart;","import React from 'react';\nimport Chart from './chart';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowRight, faSearch, faBolt, faCloudRain, faCloudShowersHeavy, faSnowflake, faCloud, faSun} from '@fortawesome/free-solid-svg-icons'\n\nconst API_KEY = '3d76823d3b8852cd38d0ca9b1fccd7ff';\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            forecast: [],\n            flag: false\n        }\n    }\n    // this.setState({\n    //     error: 'City is not found.'\n    // }); \n    getData = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n\n        if (city && country) {\n            fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&APPID=${API_KEY}&units=metric`)\n            .then(result => {\n                if (result.ok) {\n                    return result.json()\n                } else {\n                    throw new Error(\"Wystąpił błąd połączenia!\");\n                }})\n            .then(reduce => {return this.reduceData(reduce)})\n            .then(data => {return this.setState({forecast: data, flag: true, error: \"\"});})\n            .catch(() => this.setState({forecast: [], error: 'City is not found.'}));\n        } else {\n            this.setState({\n                error: 'Both fields must be filled out.'\n            })\n        }\n      \n    }\n\n    reduceData = (data) => {\n        const today = new Date()\n        const weekForecast = [{city: data.city.name, country: data.city.country}];\n        const matchIcon = (icon) => {\n            switch (icon) {\n                case 'Thunderstorm': return faBolt;\n                case 'Drizzle': return faCloudRain;\n                case 'Rain': return faCloudShowersHeavy;\n                case 'Snow': return faSnowflake;\n                case 'Clouds': return faCloud;\n                case 'Clear': return faSun;\n                default: return '';\n            }\n        }\n        let reduced = Object.values(data.list.reduce((total, el, i) => ({\n            ...total, [i]: {\n                        date: el.dt_txt.slice(0,10), \n                        day: new Date(el.dt_txt).toLocaleDateString('en-UK', { weekday: 'long' }),\n                        icon: el.weather[0].main,\n                        temp: el.main.temp,\n                        tempMin: el.main.temp_min,\n                        tempMax: el.main.temp_max}\n            }), []))\n        for (let i = 0; i < 6; i++) {\n            var day = new Date();\n            day.setDate(today.getDate() + i );\n            // eslint-disable-next-line\n            var dayForecast = reduced.filter(el => new Date(el.date).getDate() === day.getDate())\n            weekForecast.push({\n                day: this.findMode(dayForecast.map(el => el.day)),\n                icon: matchIcon(this.findMode(dayForecast.map(el => el.icon))),\n                temp: Number((dayForecast.reduce((accumulator, obj) => accumulator + obj.temp, 0) / dayForecast.length).toFixed()),\n                tempMin: Number(Math.min.apply(null, dayForecast.map(el => el.tempMin)).toFixed()),\n                tempMax: Number(Math.max.apply(null, dayForecast.map(el => el.tempMax)).toFixed())\n            })\n        }\n        return weekForecast;\n    }\n\n    /* credits to ... */\n    findMode = (input) => {\n        if (input.length > 0) {\n          let counted = input.reduce((acc, curr) => { \n            if (curr in acc) {\n                acc[curr]++;\n            } else {\n                acc[curr] = 1;\n            }\n            return acc;\n          }, {});\n          let mode = Object.keys(counted).reduce((a, b) => counted[a] > counted[b] ? a : b);\n          return mode;\n        } else {\n          return '';\n        }\n    }\n\n    handleSearchClick = () => {\n        this.setState({forecast: [], flag: false})\n    }\n\n    renderSearch = () => {\n        return (\n            <div className=\"search\">\n                <p>Please enter city and country:</p>\n                <form onSubmit={this.getData}>\n                    <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n                    <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\n                    {this.state.error && <p>{this.state.error}</p>}\n                    <button><FontAwesomeIcon icon={faArrowRight} /></button>\n                </form>\n            </div>\n        );\n    }\n\n    renderWeather = (data) => {\n        const weatherToday = data[1];\n        const forecast = data.slice(2);\n        return (\n            <div className=\"info\">\n                <div className=\"row--top\">\n                    <div className=\"weatherToday\">\n                        <p>{data[0].city}, {data[0].country}</p>\n                        {isNaN(weatherToday.temp) === false && <h1>{weatherToday.temp}&deg;</h1>}\n                        {weatherToday.day !== '' && <p>{weatherToday.day}</p>}\n                        <p>\n                            {weatherToday.tempMin !== Infinity && <span>{weatherToday.tempMin}&deg;</span>}\n                            {weatherToday.tempMax !== -Infinity && <span>{weatherToday.tempMax}&deg;</span>}\n                        </p>\n                    </div>\n                </div>\n                <div className=\"row--bottom\">\n                    <div className=\"button\" onClick={this.handleSearchClick}><FontAwesomeIcon icon={faSearch} /></div>\n                    <div className=\"forecast forecast__top\">\n                        {forecast.map((el,i) => {\n                        return <div key={i}>\n                            { el.day !== '' && <p>{ el.day.slice(0,3) }</p>}\n                            { el.icon !== '' && <p><FontAwesomeIcon icon={el.icon} /></p>}\n                            { el.tempMax !== -Infinity && <p>{ el.tempMax }&deg;</p>}\n                        </div>\n                    })}\n                    </div>\n                    <div className=\"chart\">\n                        <Chart data={data}/>\n                    </div>\n                    <div className=\"forecast forecast__bottom\">\n                        {forecast.map((el,i) => {\n                        return <div key={i}>\n                            { el.tempMin !== Infinity && <p>{ el.tempMin }&deg;</p>}\n                        </div>\n                    })}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        const { flag } = this.state;\n        return (\n            <div className=\"container\">\n                {flag ? this.renderWeather(this.state.forecast) : this.renderSearch()}\n            </div>\n        );\n    }\n}\n\n\nexport default Main;","import React from \"react\";\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\nimport \"./App.scss\";\n\nimport Welcome from \"./components/welcome.jsx\"\nimport Main from \"./components/main.jsx\"\n\nclass App extends React.Component {\n  render() {\n    return (\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/\" component={Welcome} exact/>\n            <Route path=\"/main\" component={Main}/>\n          </Switch>\n        </BrowserRouter>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}